{
    "source": "mockoon:1.17.0",
    "data": [
        {
            "type": "environment",
            "item": {
                "uuid": "f94b3e30-0778-4b5e-afcc-70a6674728e2",
                "lastMigration": 19,
                "name": "Spotify Web API",
                "endpointPrefix": "v1",
                "latency": 0,
                "port": 3000,
                "hostname": "0.0.0.0",
                "routes": [
                    {
                        "uuid": "302f43b6-c06c-4263-b44e-e54f43320f40",
                        "documentation": "Get Multiple Albums",
                        "method": "get",
                        "endpoint": "albums",
                        "responses": [
                            {
                                "uuid": "7572f41a-854b-415c-a75f-e0245f2c4a87",
                                "body": "{\n  \"albums\": [\n    {\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"copyrights\": [\n        {\n          \"text\": \"\",\n          \"type\": \"\"\n        }\n      ],\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"label\": \"\",\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"tracks\": {\n        \"href\": \"\",\n        \"items\": [\n          {\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"disc_number\": {{faker 'random.number'}},\n            \"duration_ms\": {{faker 'random.number'}},\n            \"explicit\": {{faker 'random.boolean'}},\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"is_local\": {{faker 'random.boolean'}},\n            \"is_playable\": {{faker 'random.boolean'}},\n            \"linked_from\": {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            },\n            \"name\": \"\",\n            \"preview_url\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"track_number\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"limit\": {{faker 'random.number'}},\n        \"next\": \"\",\n        \"offset\": {{faker 'random.number'}},\n        \"previous\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"albums\"` and whose value is an array of [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-albumobject) in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "0540baf9-8f56-40ae-9e28-08d3ac0b790d",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "9b2c739a-af8d-41dc-abf4-8d563f526f63",
                        "documentation": "Get an Album",
                        "method": "get",
                        "endpoint": "albums/:id",
                        "responses": [
                            {
                                "uuid": "e61757ca-9ba7-4100-a876-1262167bcdcc",
                                "body": "{\n  \"album_type\": \"\",\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"available_markets\": [\n    \"\"\n  ],\n  \"copyrights\": [\n    {\n      \"text\": \"\",\n      \"type\": \"\"\n    }\n  ],\n  \"external_ids\": {\n    \"ean\": \"\",\n    \"isrc\": \"\",\n    \"upc\": \"\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"genres\": [\n    \"\"\n  ],\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"label\": \"\",\n  \"name\": \"\",\n  \"popularity\": {{faker 'random.number'}},\n  \"release_date\": \"\",\n  \"release_date_precision\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"total_tracks\": {{faker 'random.number'}},\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "7b10365a-6997-464f-a602-578dc6f05ca3",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "51e019b3-ca5c-4677-9208-a51caccde99f",
                        "documentation": "Get an Album's Tracks",
                        "method": "get",
                        "endpoint": "albums/:id/tracks",
                        "responses": [
                            {
                                "uuid": "63af6cf6-b47f-4a05-9512-3cf88fff1746",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "102123a8-c505-4a4b-be5e-9e27398c21ce",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "df8874d3-34d2-4a9f-9fa2-0a9910f20e13",
                        "documentation": "Get Multiple Artists",
                        "method": "get",
                        "endpoint": "artists",
                        "responses": [
                            {
                                "uuid": "cc391712-51da-49f9-adf0-bbce3b6e87ca",
                                "body": "{\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "110ee60e-1404-4fbd-a84b-277a07633c30",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "ad2d86a8-7360-49f8-a476-b507706cec61",
                        "documentation": "Get an Artist",
                        "method": "get",
                        "endpoint": "artists/:id",
                        "responses": [
                            {
                                "uuid": "4c2c8332-b2e8-48ab-9307-1223e36a6d9e",
                                "body": "{\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"genres\": [\n    \"\"\n  ],\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"popularity\": {{faker 'random.number'}},\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an [artist object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "61e3baa4-1a58-4b9c-9d50-bb49dd4fb8f8",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "19639ce3-f140-4090-94b9-315eb5e29fc2",
                        "documentation": "Get an Artist's Albums",
                        "method": "get",
                        "endpoint": "artists/:id/albums",
                        "responses": [
                            {
                                "uuid": "9493d6e5-e37e-425d-a0a7-37837b7cc349",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "9919d637-f1c1-485d-94d9-23e04f4ee0b3",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "a8acbc68-545b-4d3a-8a55-5305486514f3",
                        "documentation": "Get an Artist's Related Artists",
                        "method": "get",
                        "endpoint": "artists/:id/related-artists",
                        "responses": [
                            {
                                "uuid": "ccc45d83-300a-4e95-b58c-ba87d37ccd91",
                                "body": "{\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of up to 20 [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "eab27242-af0d-46da-a108-ba3203cea2d5",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "08050035-47f2-44ab-a22b-d957c1c58c96",
                        "documentation": "Get an Artist's Top Tracks",
                        "method": "get",
                        "endpoint": "artists/:id/top-tracks",
                        "responses": [
                            {
                                "uuid": "80fe31b3-e98b-4989-ade1-accec0ef0e21",
                                "body": "{\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"tracks\"` and whose value is an array of up to 10 [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "d5810180-dba6-48f2-abb2-542030ea94a8",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "5728c4b9-8994-4f56-8f13-6ae1cbfb0f8d",
                        "documentation": "Get Audio Analysis for a Track",
                        "method": "get",
                        "endpoint": "audio-analysis/:id",
                        "responses": [
                            {
                                "uuid": "ea3aa305-a210-4bf2-978a-620b2070aeb2",
                                "body": "{\n  \"bars\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}}\n    }\n  ],\n  \"beats\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}}\n    }\n  ],\n  \"sections\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"key\": {{faker 'random.number'}},\n      \"key_confidence\": {{faker 'random.number'}},\n      \"loudness\": {{faker 'random.number'}},\n      \"mode\": {{faker 'random.number'}},\n      \"mode_confidence\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}},\n      \"tempo\": {{faker 'random.number'}},\n      \"tempo_confidence\": {{faker 'random.number'}},\n      \"time_signature\": {{faker 'random.number'}},\n      \"time_signature_confidence\": {{faker 'random.number'}}\n    }\n  ],\n  \"segments\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"loudness_end\": {{faker 'random.number'}},\n      \"loudness_max\": {{faker 'random.number'}},\n      \"loudness_max_time\": {{faker 'random.number'}},\n      \"loudness_start\": {{faker 'random.number'}},\n      \"pitches\": [\n        {{faker 'random.number'}}\n      ],\n      \"start\": {{faker 'random.number'}},\n      \"timbre\": [\n        {{faker 'random.number'}}\n      ]\n    }\n  ],\n  \"tatums\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}}\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains an audio analysis object in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "c603f923-089f-4b59-bb25-f8fb43289e94",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "e0b4c873-678b-43b7-8b19-6061dd4794be",
                        "documentation": "Get Audio Features for Several Tracks",
                        "method": "get",
                        "endpoint": "audio-features",
                        "responses": [
                            {
                                "uuid": "802caca5-a073-4f2f-a2ed-80e1880d8594",
                                "body": "{\n  \"audio_features\": [\n    {\n      \"acousticness\": {{faker 'random.number'}},\n      \"analysis_url\": \"\",\n      \"danceability\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"energy\": {{faker 'random.number'}},\n      \"id\": \"\",\n      \"instrumentalness\": {{faker 'random.number'}},\n      \"key\": {{faker 'random.number'}},\n      \"liveness\": {{faker 'random.number'}},\n      \"loudness\": {{faker 'random.number'}},\n      \"mode\": {{faker 'random.number'}},\n      \"speechiness\": {{faker 'random.number'}},\n      \"tempo\": {{faker 'random.number'}},\n      \"time_signature\": {{faker 'random.number'}},\n      \"track_href\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\",\n      \"valence\": {{faker 'random.number'}}\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK`\nand the response body contains an object whose key is `\"audio_features\"` and\nwhose value is an array of audio features objects in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "0e0cf6ed-c19c-443d-81b7-273cbd41fe31",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "72999061-b929-4fc3-aa5b-ae2fc8f5112e",
                        "documentation": "Get Audio Features for a Track",
                        "method": "get",
                        "endpoint": "audio-features/:id",
                        "responses": [
                            {
                                "uuid": "2fe51c5a-87b5-4af7-9320-3aeda8008a43",
                                "body": "{\n  \"acousticness\": {{faker 'random.number'}},\n  \"analysis_url\": \"\",\n  \"danceability\": {{faker 'random.number'}},\n  \"duration_ms\": {{faker 'random.number'}},\n  \"energy\": {{faker 'random.number'}},\n  \"id\": \"\",\n  \"instrumentalness\": {{faker 'random.number'}},\n  \"key\": {{faker 'random.number'}},\n  \"liveness\": {{faker 'random.number'}},\n  \"loudness\": {{faker 'random.number'}},\n  \"mode\": {{faker 'random.number'}},\n  \"speechiness\": {{faker 'random.number'}},\n  \"tempo\": {{faker 'random.number'}},\n  \"time_signature\": {{faker 'random.number'}},\n  \"track_href\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\",\n  \"valence\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains an [audio features object](https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "eb05f51b-a293-4bda-b409-728a2bec77fe",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "59bdc9ed-1f37-401a-9158-018b107e6f96",
                        "documentation": "Get All Categories",
                        "method": "get",
                        "endpoint": "browse/categories",
                        "responses": [
                            {
                                "uuid": "89ace854-933c-4d81-acae-8b4846302b19",
                                "body": "{\n  \"categories\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"href\": \"\",\n        \"icons\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"id\": \"\",\n        \"name\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object with a `categories` field, with an array of [category objects](#categoryobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get a Category](https://developer.spotify.com/web-api/get-category/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "c65b2591-4f62-4db2-9f31-ea3ac4b68cd6",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "a65e19c5-bacb-4b25-8ba8-9d19a0f1c81e",
                        "documentation": "Get a Category",
                        "method": "get",
                        "endpoint": "browse/categories/:category_id",
                        "responses": [
                            {
                                "uuid": "f22b300e-b93e-454e-ae86-88cd17af4581",
                                "body": "{\n  \"href\": \"\",\n  \"icons\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"id\": \"\",\n  \"name\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [category object](#categoryobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the category, you can use [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "91f4c03a-df6a-4f0b-84b1-0534aefe6fe0",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "5f9dfd3a-b0fa-4509-a681-798820fdef7d",
                        "documentation": "Get a Category's Playlists",
                        "method": "get",
                        "endpoint": "browse/categories/:category_id/playlists",
                        "responses": [
                            {
                                "uuid": "6bfa11f9-2165-4826-9876-312ada4adaf8",
                                "body": "{\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'random.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'random.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "57f7ba80-3e3e-42fb-ba62-73ac428c197c",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "80f70cbe-e975-4708-8745-fd2830c3a090",
                        "documentation": "Get All Featured Playlists",
                        "method": "get",
                        "endpoint": "browse/featured-playlists",
                        "responses": [
                            {
                                "uuid": "6b6cda3c-c266-4357-a40b-7f22a56bfe4f",
                                "body": "{\n  \"message\": \"\",\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'random.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'random.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and a `playlists` object. The `playlists` object contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list of playlist objects, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "f872bd31-bf03-4416-9f46-18662232b4da",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "f48574ef-9ae1-490a-a8da-69de736a9205",
                        "documentation": "Get All New Releases",
                        "method": "get",
                        "endpoint": "browse/new-releases",
                        "responses": [
                            {
                                "uuid": "8c0558ad-01e5-426e-9d95-529aec95398f",
                                "body": "{\n  \"albums\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and an`albums` object. The `albums` object contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get an Album's Tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks) to drill down further.\n\nThe results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "fa8fc04c-54c1-4b35-a182-39dc6c5accf4",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "b92c4355-3388-4d12-a25c-15eb31e966c2",
                        "documentation": "Get Multiple Episodes",
                        "method": "get",
                        "endpoint": "episodes",
                        "responses": [
                            {
                                "uuid": "a643c00e-4161-41b4-b802-75afb824c30b",
                                "body": "{\n  \"episodes\": [\n    {\n      \"audio_preview_url\": \"\",\n      \"description\": \"\",\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"language\": \"\",\n      \"languages\": [\n        \"\"\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"resume_point\": {\n        \"fully_played\": {{faker 'random.boolean'}},\n        \"resume_position_ms\": {{faker 'random.number'}}\n      },\n      \"show\": {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `episodes` and whose\nvalue is an array of [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position.\nDuplicate `ids` in the query will result in duplicate objects in the response. If an episode is unavailable in the given `market`, a `null` value is returned.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "2b5645da-b5ef-482a-a5f6-e7e3555bc0da",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "ef316b09-ed10-4996-9ce0-3b0bdd47607b",
                        "documentation": "Get an Episode",
                        "method": "get",
                        "endpoint": "episodes/:id",
                        "responses": [
                            {
                                "uuid": "9f191db3-a2cb-4cd8-a1e7-ec61e8eed5fc",
                                "body": "{\n  \"audio_preview_url\": \"\",\n  \"description\": \"\",\n  \"duration_ms\": {{faker 'random.number'}},\n  \"explicit\": {{faker 'random.boolean'}},\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"html_description\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"is_externally_hosted\": {{faker 'random.boolean'}},\n  \"is_playable\": {{faker 'random.boolean'}},\n  \"language\": \"\",\n  \"languages\": [\n    \"\"\n  ],\n  \"name\": \"\",\n  \"release_date\": \"\",\n  \"release_date_precision\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"resume_point\": {\n    \"fully_played\": {{faker 'random.boolean'}},\n    \"resume_position_ms\": {{faker 'random.number'}}\n  },\n  \"show\": {\n    \"available_markets\": [\n      \"\"\n    ],\n    \"copyrights\": [\n      {\n        \"text\": \"\",\n        \"type\": \"\"\n      }\n    ],\n    \"description\": \"\",\n    \"explicit\": {{faker 'random.boolean'}},\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"html_description\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"is_externally_hosted\": {{faker 'random.boolean'}},\n    \"languages\": [\n      \"\"\n    ],\n    \"media_type\": \"\",\n    \"name\": \"\",\n    \"publisher\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an [episode object](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\nin JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  \n\nIf an episode is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "9803baf2-e567-4e92-9546-29803abfad1a",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "2009d36f-1cf6-4ff3-bfa7-97a61f29985a",
                        "documentation": "Get Available Markets",
                        "method": "get",
                        "endpoint": "markets",
                        "responses": [
                            {
                                "uuid": "678b22c4-00e3-4ca1-af70-eef36585d6e3",
                                "body": "{\n  \"markets\": [\n    \"\"\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains a list of the countries in which Spotify is available, identified by their [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) with additional country codes for special territories. On error, the header status code is an error code and the response body contains an error object.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "427a22a0-b355-4bb2-9994-29b2481e8ce3",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "837389a7-539d-4d50-a63c-d92a10168a29",
                        "documentation": "Get Current User's Profile",
                        "method": "get",
                        "endpoint": "me",
                        "responses": [
                            {
                                "uuid": "892e4715-f82d-4bd4-b8de-f168e3d4c3cc",
                                "body": "{\n  \"country\": \"\",\n  \"display_name\": \"\",\n  \"email\": \"\",\n  \"explicit_content\": {\n    \"filter_enabled\": {{faker 'random.boolean'}},\n    \"filter_locked\": {{faker 'random.boolean'}}\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"product\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). When requesting fields that you don't have the user's authorization to access, it will return error `403` Forbidden.\n\n**Important!** If the `user-read-email` scope is authorized, the returned JSON will include the email address that was entered when the user created their Spotify account. **This email address is unverified**; do not assume that the email address belongs to the user.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "7314cb61-eb89-44f3-90b5-27883acefd41",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "d79b51a5-3f1f-40b0-a008-b17e7f1593c4",
                        "documentation": "Remove Albums for Current User",
                        "method": "delete",
                        "endpoint": "me/albums",
                        "responses": [
                            {
                                "uuid": "9ec77ef8-6577-4f37-9bd7-cfc80ba8efa5",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an album when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "1727188a-ca95-4cb5-8425-b7a22696d313",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "0fb24885-3057-4b15-a438-1133b5dda113",
                        "documentation": "Get User's Saved Albums",
                        "method": "get",
                        "endpoint": "me/albums",
                        "responses": [
                            {
                                "uuid": "d135044b-3bc7-4499-a1fb-954b7bb45d3a",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"album\": {\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"label\": \"\",\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"tracks\": {\n          \"href\": \"\",\n          \"items\": [\n            {\n              \"artists\": [\n                {\n                  \"external_urls\": {\n                    \"spotify\": \"\"\n                  },\n                  \"href\": \"\",\n                  \"id\": \"\",\n                  \"name\": \"\",\n                  \"type\": \"\",\n                  \"uri\": \"\"\n                }\n              ],\n              \"available_markets\": [\n                \"\"\n              ],\n              \"disc_number\": {{faker 'random.number'}},\n              \"duration_ms\": {{faker 'random.number'}},\n              \"explicit\": {{faker 'random.boolean'}},\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"is_local\": {{faker 'random.boolean'}},\n              \"is_playable\": {{faker 'random.boolean'}},\n              \"linked_from\": {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              },\n              \"name\": \"\",\n              \"preview_url\": \"\",\n              \"restrictions\": {\n                \"reason\": \"\"\n              },\n              \"track_number\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"limit\": {{faker 'random.number'}},\n          \"next\": \"\",\n          \"offset\": {{faker 'random.number'}},\n          \"previous\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved album objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. Each album object is accompanied by a [timestamp](https://developer.spotify.com/documentation/web-api/#timestamps) (`added_at`) to show when it was added. There is also an **etag** in the header that can be used in future [conditional requests](https://developer.spotify.com/documentation/web-api/#conditional-requests).\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "4e3775cb-8c0b-4593-bac5-f60b1a75670d",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "f525a4b0-b013-4d25-b48b-cf84ae33cf3d",
                        "documentation": "Save Albums for Current User",
                        "method": "put",
                        "endpoint": "me/albums",
                        "responses": [
                            {
                                "uuid": "55426f8f-59f1-446e-84d2-33670ded6c68",
                                "body": "",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On success, the HTTP status code in the response header is `201` Created. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an album when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "e3443688-c92d-4c2b-8a09-6f7ad637e5f0",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "f33fd093-5aeb-413c-a70e-81e15f36f4af",
                        "documentation": "Check User's Saved Albums",
                        "method": "get",
                        "endpoint": "me/albums/contains",
                        "responses": [
                            {
                                "uuid": "fa3b7a96-8c06-4196-89d5-ca95d88d3c54",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "4f662d4c-b84f-4829-b9ee-924f7b5fd987",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "a5cff929-7fcb-4eed-9013-e500ed407678",
                        "documentation": "Remove User's Saved Episodes",
                        "method": "delete",
                        "endpoint": "me/episodes",
                        "responses": [
                            {
                                "uuid": "61cc3b76-aa98-4871-b056-777a00b54c33",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an episode when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "9fce2b3c-de4d-4ca5-9a2e-e79110ba895d",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6c8119f7-3ff3-4729-a40e-64dd4d2b1bbe",
                        "documentation": "Get User's Saved Episodes",
                        "method": "get",
                        "endpoint": "me/episodes",
                        "responses": [
                            {
                                "uuid": "7d764f98-d6cf-47e6-a152-99cf03f72db3",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"episode\": {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'random.boolean'}},\n          \"resume_position_ms\": {{faker 'random.number'}}\n        },\n        \"show\": {\n          \"available_markets\": [\n            \"\"\n          ],\n          \"copyrights\": [\n            {\n              \"text\": \"\",\n              \"type\": \"\"\n            }\n          ],\n          \"description\": \"\",\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"html_description\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"is_externally_hosted\": {{faker 'random.boolean'}},\n          \"languages\": [\n            \"\"\n          ],\n          \"media_type\": \"\",\n          \"name\": \"\",\n          \"publisher\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "- On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "70c93c27-fce3-45bc-92f5-ab8cd4a41444",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "9978fd28-d2a0-42bc-91d6-339a68f01163",
                        "documentation": "Save Episodes for User",
                        "method": "put",
                        "endpoint": "me/episodes",
                        "responses": [
                            {
                                "uuid": "09bb2145-e3d3-482a-baff-9bbe5afbe4e5",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an episode when you do not have the user's authorization, returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "7bfe181f-d801-4684-ad85-b1c81774799e",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "1dcf67bd-c20c-48b0-8b54-b28c5abb19ba",
                        "documentation": "Check User's Saved Episodes",
                        "method": "get",
                        "endpoint": "me/episodes/contains",
                        "responses": [
                            {
                                "uuid": "c55d07ee-9aeb-423a-a921-90f9de1ed196",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "d6c53b79-eaf3-4302-97a7-de26e46f4812",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "7017b8a0-ea82-4f07-8e23-776e82f89725",
                        "documentation": "Unfollow Artists or Users",
                        "method": "delete",
                        "endpoint": "me/following",
                        "responses": [
                            {
                                "uuid": "42fe94eb-c142-45dd-bb47-1f38d4dff83f",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "On success, the HTTP status code in the response header is `204` No Content and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "bc38ed68-8439-4989-b1c4-51491e427158",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "e80918c1-ddf5-46ab-ad3f-37a07d6dee85",
                        "documentation": "Get User's Followed Artists",
                        "method": "get",
                        "endpoint": "me/following",
                        "responses": [
                            {
                                "uuid": "aa86d263-8157-46b4-b768-5c63e86dfa2d",
                                "body": "{\n  \"artists\": {\n    \"cursors\": {\n      \"after\": \"\"\n    },\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an `artists` object.\nThe `artists` object in turn contains a [cursor-based paging object](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "af513c8d-c228-43a7-85fc-b3b4ed509263",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "70bd1d5b-8cda-4115-bb0c-93c05200f545",
                        "documentation": "Follow Artists or Users",
                        "method": "put",
                        "endpoint": "me/following",
                        "responses": [
                            {
                                "uuid": "c87f939e-05c2-489a-96e1-083d87840b70",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "On success, the HTTP status code in the response header is `204` No Content and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "bdbbae45-4edf-4301-baaf-430798784c6c",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "4bdc2b54-320a-481d-ad64-0b67f141d5c8",
                        "documentation": "Get Following State for Artists/Users",
                        "method": "get",
                        "endpoint": "me/following/contains",
                        "responses": [
                            {
                                "uuid": "9d7d6267-17bb-4f6d-9347-53f0d9b8f41a",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "9f753150-94b7-4273-8bd2-19a32d2176a1",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6b3c83f5-68b8-46bd-837f-57fad75c1cc9",
                        "documentation": "Get Information About The User's Current Playback",
                        "method": "get",
                        "endpoint": "me/player",
                        "responses": [
                            {
                                "uuid": "33f3d1f4-cdaa-4d87-a3d5-219cc8641731",
                                "body": "{\n  \"actions\": {\n    \"interrupting_playback\": {{faker 'random.boolean'}},\n    \"pausing\": {{faker 'random.boolean'}},\n    \"resuming\": {{faker 'random.boolean'}},\n    \"seeking\": {{faker 'random.boolean'}},\n    \"skipping_next\": {{faker 'random.boolean'}},\n    \"skipping_prev\": {{faker 'random.boolean'}},\n    \"toggling_repeat_context\": {{faker 'random.boolean'}},\n    \"toggling_repeat_track\": {{faker 'random.boolean'}},\n    \"toggling_shuffle\": {{faker 'random.boolean'}},\n    \"transferring_playback\": {{faker 'random.boolean'}}\n  },\n  \"context\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"currently_playing_type\": \"\",\n  \"device\": {\n    \"id\": \"\",\n    \"is_active\": {{faker 'random.boolean'}},\n    \"is_private_session\": {{faker 'random.boolean'}},\n    \"is_restricted\": {{faker 'random.boolean'}},\n    \"name\": \"\",\n    \"type\": \"\",\n    \"volume_percent\": {{faker 'random.number'}}\n  },\n  \"is_playing\": {{faker 'random.boolean'}},\n  \"item\": {\n    \"album\": {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"disc_number\": {{faker 'random.number'}},\n    \"duration_ms\": {{faker 'random.number'}},\n    \"explicit\": {{faker 'random.boolean'}},\n    \"external_ids\": {\n      \"ean\": \"\",\n      \"isrc\": \"\",\n      \"upc\": \"\"\n    },\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"is_local\": {{faker 'random.boolean'}},\n    \"is_playable\": {{faker 'random.boolean'}},\n    \"linked_from\": {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"name\": \"\",\n    \"popularity\": {{faker 'random.number'}},\n    \"preview_url\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"track_number\": {{faker 'random.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"progress_ms\": {{faker 'random.number'}},\n  \"repeat_state\": \"\",\n  \"shuffle_state\": \"\",\n  \"timestamp\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "5a754ad0-4ac6-4754-8f23-7088b7a64862",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "acde1311-94ce-441e-8413-df2c713ee389",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "91c519e3-9e89-427b-8ced-ade8108ff1d4",
                        "documentation": "Transfer a User's Playback",
                        "method": "put",
                        "endpoint": "me/player",
                        "responses": [
                            {
                                "uuid": "ba81b287-ddbc-436e-a114-47f3a2862957",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "11c665f5-3482-4021-8344-4aef0e6b25f9",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "7ef02bf8-dc92-44f2-a5cf-cc95e4c5c64c",
                        "documentation": "Get the User's Currently Playing Track",
                        "method": "get",
                        "endpoint": "me/player/currently-playing",
                        "responses": [
                            {
                                "uuid": "ba4a48ae-48f1-48d8-9f6d-4b549abb76e2",
                                "body": "{\n  \"context\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"currently_playing_type\": \"\",\n  \"is_playing\": {{faker 'random.boolean'}},\n  \"item\": {\n    \"album\": {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"disc_number\": {{faker 'random.number'}},\n    \"duration_ms\": {{faker 'random.number'}},\n    \"explicit\": {{faker 'random.boolean'}},\n    \"external_ids\": {\n      \"ean\": \"\",\n      \"isrc\": \"\",\n      \"upc\": \"\"\n    },\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"is_local\": {{faker 'random.boolean'}},\n    \"is_playable\": {{faker 'random.boolean'}},\n    \"linked_from\": {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"name\": \"\",\n    \"popularity\": {{faker 'random.number'}},\n    \"preview_url\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"track_number\": {{faker 'random.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"progress_ms\": {{faker 'random.number'}},\n  \"timestamp\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\n\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.\n\nWhen no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "3833d61a-28a4-468b-a348-d2ec674a1d61",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\n\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.\n\nWhen no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "63c869fa-eac4-43b6-aa5d-9879e59fd2ac",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "e1ade1ac-cf4d-452e-b253-964a8b7f895f",
                        "documentation": "Get a User's Available Devices",
                        "method": "get",
                        "endpoint": "me/player/devices",
                        "responses": [
                            {
                                "uuid": "0f6c0041-a198-416c-b4f7-b471853ed401",
                                "body": "{\n  \"devices\": [\n    {\n      \"id\": \"\",\n      \"is_active\": {{faker 'random.boolean'}},\n      \"is_private_session\": {{faker 'random.boolean'}},\n      \"is_restricted\": {{faker 'random.boolean'}},\n      \"name\": \"\",\n      \"type\": \"\",\n      \"volume_percent\": {{faker 'random.number'}}\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains the device objects (see below).\nWhen no available devices are found, the request will return a 200 OK response with an empty devices list.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "d929d461-d138-46e9-aeba-a93b8c776fe5",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6846b16f-4e59-489c-ba53-bc4a352dc728",
                        "documentation": "Skip User’s Playback To Next Track",
                        "method": "post",
                        "endpoint": "me/player/next",
                        "responses": [
                            {
                                "uuid": "112f68e9-14fc-4da5-b2c1-007b71c34456",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "e7cd02d7-d4b3-48fe-b370-dfaadaebbc63",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "39c448b6-e5ff-4e76-aebb-924e70bb94a6",
                        "documentation": "Pause a User's Playback",
                        "method": "put",
                        "endpoint": "me/player/pause",
                        "responses": [
                            {
                                "uuid": "6f5e85e3-8653-4be8-9e71-1008ec66285c",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "c77af7c8-76cc-4b9b-9f2d-2d8768d437a9",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "71985c0c-af7b-4f6f-b678-d5fac58905ac",
                        "documentation": "Start/Resume a User's Playback",
                        "method": "put",
                        "endpoint": "me/player/play",
                        "responses": [
                            {
                                "uuid": "067649f0-4684-47fb-978a-29bb0db50e49",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "8f1a5478-0613-4e21-a3d7-09f4bd8e8fda",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "627a95fb-234c-4f9a-ab1e-9e632382232d",
                        "documentation": "Skip User’s Playback To Previous Track",
                        "method": "post",
                        "endpoint": "me/player/previous",
                        "responses": [
                            {
                                "uuid": "0c72786e-908f-4601-9f78-b545226fecc9",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "685f0364-a4b2-4873-8195-41bcd366e8ef",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "e839a2e8-27ea-47ef-bc37-5ad73a64dedb",
                        "documentation": "Add an item to queue",
                        "method": "post",
                        "endpoint": "me/player/queue",
                        "responses": [
                            {
                                "uuid": "817db0f9-4eb8-468e-bed0-942737e562c0",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "bd9ca63d-1dbb-44b2-bc82-519327e37163",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "2e1638ef-89cb-4017-9d84-def458fa0a45",
                        "documentation": "Get Current User's Recently Played Tracks",
                        "method": "get",
                        "endpoint": "me/player/recently-played",
                        "responses": [
                            {
                                "uuid": "b00e7181-d0b0-4805-986a-ea55af503f30",
                                "body": "{\n  \"cursors\": {\n    \"after\": \"\"\n  },\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"context\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"played_at\": \"{{faker 'date.recent' 365}}\",\n      \"track\": {\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "bd8abac6-2581-48c9-8249-d9b18e49e401",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "52d1a8da-ab1d-4a0f-bfb4-d0a7fdf24ad4",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "1f2d5cb9-ff7b-4ac1-9db5-b07a0194bf5a",
                        "documentation": "Set Repeat Mode On User’s Playback",
                        "method": "put",
                        "endpoint": "me/player/repeat",
                        "responses": [
                            {
                                "uuid": "9e09d486-02d8-4b73-b687-03c65be3902e",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "9efdda31-bd02-4c49-a650-10b85e8ecd81",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "b3bbeff8-c638-43a3-9b55-1e8e7e9b9c21",
                        "documentation": "Seek To Position In Currently Playing Track",
                        "method": "put",
                        "endpoint": "me/player/seek",
                        "responses": [
                            {
                                "uuid": "2597617f-4547-4a78-810b-2dc85e054cf4",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "bb0f1c80-bc44-46fc-8ff7-674d6de20f54",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "c9d04595-c854-44ae-a7a1-2ff774a28ed3",
                        "documentation": "Toggle Shuffle For User’s Playback",
                        "method": "put",
                        "endpoint": "me/player/shuffle",
                        "responses": [
                            {
                                "uuid": "da8d734c-2b89-4b55-acc7-3079edf5ee79",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "686d0820-a54b-4456-811d-611798a30563",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "5d29e4a8-3e64-4c60-b7f9-fc206ccfc499",
                        "documentation": "Set Volume For User's Playback",
                        "method": "put",
                        "endpoint": "me/player/volume",
                        "responses": [
                            {
                                "uuid": "f3643600-70fb-402f-b489-44dfe74a1c82",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "1b3ca76b-67a8-4515-8940-21dd2faf3624",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "8571de84-7069-46bd-a2bf-b1c910d6dffe",
                        "documentation": "Get a List of Current User's Playlists",
                        "method": "get",
                        "endpoint": "me/playlists",
                        "responses": [
                            {
                                "uuid": "6901f1b7-7ec8-4308-a9c3-8a66ac9601ea",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"collaborative\": {{faker 'random.boolean'}},\n      \"description\": \"\",\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"owner\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"public\": {{faker 'random.boolean'}},\n      \"snapshot_id\": \"\",\n      \"tracks\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Please note that the access token has to be tied to a user.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "9937a00f-891d-4b57-b39b-2e49abd293ac",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "a25ce7a6-02ac-4559-8f61-a187da9f7288",
                        "documentation": "Remove User's Saved Shows",
                        "method": "delete",
                        "endpoint": "me/shows",
                        "responses": [
                            {
                                "uuid": "f6bd54c5-6e85-42b0-aa77-9b5daef4bc8d",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "8ba77845-4033-4982-950d-78fd7d9ce996",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "e7a0f26a-660d-48a7-8fbf-da169d497201",
                        "documentation": "Get User's Saved Shows",
                        "method": "get",
                        "endpoint": "me/shows",
                        "responses": [
                            {
                                "uuid": "95383597-3103-4832-9e82-6b0b0f8ff528",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"show\": {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved show objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.\nIf the current user has no shows saved, the response will be an empty array. If a show is unavailable in the given `market` it is filtered out. The `total` field in the paging object represents the number of all items, filtered or not, and thus might be larger than the actual total number of observable items.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "2a629a14-a855-4fa3-85ae-842908586132",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6759cfe8-aee4-4d61-b1f4-c401d722851a",
                        "documentation": "Save Shows for Current User",
                        "method": "put",
                        "endpoint": "me/shows",
                        "responses": [
                            {
                                "uuid": "2872ec34-ef4b-4614-8223-35f50901bdd2",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation or when the user already has have over 10,000 items saved in library.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "457b4a48-1359-49f6-9188-56e94750687e",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "8cc84128-f894-4896-88d1-1d547005172a",
                        "documentation": "Check User's Saved Shows",
                        "method": "get",
                        "endpoint": "me/shows/contains",
                        "responses": [
                            {
                                "uuid": "0354e2bb-8a4a-4533-8d18-fc3987051c91",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true`or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "7e993341-e214-4beb-a1c0-f500713578c4",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "2eb00962-7bad-49e8-9bd8-66e26c527acd",
                        "documentation": "Get a User's Top Artists and Tracks",
                        "method": "get",
                        "endpoint": "me/top/:type",
                        "responses": [
                            {
                                "uuid": "8a9aefce-9793-47ae-8d05-76ac7ce59ff1",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) or [Tracks](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "2157da43-8f76-4ec1-b682-48689f9ad329",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6fdba1ec-214a-4a79-a699-1aabae09452b",
                        "documentation": "Remove User's Saved Tracks",
                        "method": "delete",
                        "endpoint": "me/tracks",
                        "responses": [
                            {
                                "uuid": "6d8a1125-498f-4f14-8ae4-b4c35a509c70",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an album when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "7dc104f8-80f5-43be-a491-50d7ef0bfc54",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "33acc051-7d78-47b7-b9d5-7061322bb656",
                        "documentation": "Get User's Saved Tracks",
                        "method": "get",
                        "endpoint": "me/tracks",
                        "responses": [
                            {
                                "uuid": "e25350bc-ea18-48f4-86bb-673a95c478e9",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"track\": {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved track objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "0459bcd2-d2fb-420f-9f7d-46b5ba2768ee",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "4ff4189c-4e26-412e-9cc3-408b0d23571e",
                        "documentation": "Save Tracks for User",
                        "method": "put",
                        "endpoint": "me/tracks",
                        "responses": [
                            {
                                "uuid": "ad95566b-235c-438d-9e35-af3fd9a12d02",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add a track when you do not have the user's authorization, or when you have over 10.000 tracks in Your Music, returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "bea2c089-b798-4924-9c80-ebc6a52d7e71",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "e2677c44-ebef-48db-bc50-e7cfcac04355",
                        "documentation": "Check User's Saved Tracks",
                        "method": "get",
                        "endpoint": "me/tracks/contains",
                        "responses": [
                            {
                                "uuid": "fba4d807-2d62-41c8-abcc-9364f82a1948",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "80a3122e-90a8-4660-899b-a16b996b7ffc",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "c4086e0e-c2e2-4b91-a9aa-996c77b53523",
                        "documentation": "Get a Playlist",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id",
                        "responses": [
                            {
                                "uuid": "7d99376a-c96d-4946-b9df-81fd505a2bb2",
                                "body": "{\n  \"collaborative\": {{faker 'random.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'random.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'random.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'random.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'random.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'random.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'random.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'random.number'}},\n          \"duration_ms\": {{faker 'random.number'}},\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'random.boolean'}},\n          \"is_playable\": {{faker 'random.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "2a3929ea-a8a4-47b0-84b4-1fe6cbb4521b",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6b30b69e-69eb-48f8-a240-1faa2a5e68a0",
                        "documentation": "Change a Playlist's Details",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id",
                        "responses": [
                            {
                                "uuid": "97105377-cb55-462f-bd23-1ca14ddc1e7d",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success the HTTP status code in the response header is `200` OK.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "42789dce-263b-43f2-ac7e-510deb4fb319",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "34e62f5f-1863-445d-82fd-e4732b8fe857",
                        "documentation": "Unfollow Playlist",
                        "method": "delete",
                        "endpoint": "playlists/:playlist_id/followers",
                        "responses": [
                            {
                                "uuid": "78ca5ac5-066a-4b7d-a0ae-1782af128ae3",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "d5e5344a-1862-4b76-98f2-d5ac2b59bd99",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "e05e1ae4-9044-4393-b461-782029e58ff8",
                        "documentation": "Follow a Playlist",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id/followers",
                        "responses": [
                            {
                                "uuid": "08253028-7be0-4667-8743-93004e7624dd",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "20a5044c-e815-4d23-a576-1711e0fb5046",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "907f42bf-4d78-4bce-b55b-b3578b4ed4ae",
                        "documentation": "Check if Users Follow a Playlist",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id/followers/contains",
                        "responses": [
                            {
                                "uuid": "7ce9b6a5-de5f-4e3f-9adb-4879cd6183b5",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "f1ba7737-82d9-4d84-8041-46410e599c6f",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6516e630-4252-45e2-9b5d-ead023f869e1",
                        "documentation": "Get a Playlist Cover Image",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id/images",
                        "responses": [
                            {
                                "uuid": "26b9332d-ec35-4965-9c48-ef67c31b77a6",
                                "body": "[\n  {\n    \"height\": {{faker 'random.number'}},\n    \"url\": \"\",\n    \"width\": {{faker 'random.number'}}\n  }\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains a list of [image objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject) in JSON format and the HTTP status code in the response header is `200` OK  \nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "1a74ca28-376d-4596-8d47-44997a87b72b",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "78120fc3-e458-41c8-913d-4a3617aede20",
                        "documentation": "Upload a Custom Playlist Cover Image",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id/images",
                        "responses": [
                            {
                                "uuid": "bfebab88-ac55-4e0a-93b8-0817ba2c1c85",
                                "body": "",
                                "latency": 0,
                                "statusCode": 202,
                                "label": "If you get status code `429`, it means that you have sent too many requests.\nIf this happens, have a look in the `Retry-After` header, where you will see a number displayed.\nThis is the amount of seconds that you need to wait, before you can retry sending your requests.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "0cd87d92-2fbd-4142-aa3e-2a10a9a8839b",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "a09fcbf1-eb5a-4f62-b3ec-a0d2b9fd1c93",
                        "documentation": "Remove Items from a Playlist",
                        "method": "delete",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "4a57d525-dfc0-4d3f-8a6d-20e4666220cf",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/spotify-documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/spotify-documentation/web-api/#response-schema).\nTrying to remove an item when you do not have the user's authorization returns error `403` Forbidden.\nAttempting to use several different ways to remove items returns `400` Bad Request.\nOther client errors returning `400` Bad Request include specifying invalid positions.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "40656abc-a539-4aba-8f42-890b6f6bf39f",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "b873e0d4-d33d-4755-8cfd-799436653619",
                        "documentation": "Get a Playlist's Items",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "5b618580-25fe-4cd2-bbb8-68960ffd0f31",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"added_by\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"is_local\": {{faker 'random.boolean'}},\n      \"track\": {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject) and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "c59a5cd6-61f0-4a53-b145-8948d7bb0e0f",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "5bd5d963-feaa-4518-8043-b4f1fc8f4bc8",
                        "documentation": "Add Items to a Playlist",
                        "method": "post",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "d8db8bd4-ef4f-43dd-b48d-bd4f88f2410a",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On success, the HTTP status code in the response header is `201` Created. The response body contains a `snapshot_id` in JSON format. The `snapshot_id` can be used to identify your playlist version in future requests. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an item when you do not have the user's authorization, or when there are more than 10.000 items in the playlist, returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "4e867683-e57c-44ef-9240-d2184a15952e",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "b1fa6f7c-f076-421e-92e2-113b87645575",
                        "documentation": "Reorder or Replace a Playlist's Items",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "543dfcb7-7b27-4b08-8cbe-71173d68ac89",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn a successful **replace** operation, the HTTP status code in the response header is `201`\nCreated.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\nthe response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\nand the existing playlist is unmodified.\nTrying to set an item when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "185a6d45-a6e1-47e8-a99c-b8fa7e4183f0",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn a successful **replace** operation, the HTTP status code in the response header is `201`\nCreated.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\nthe response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\nand the existing playlist is unmodified.\nTrying to set an item when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "be0557a5-ed39-4331-9c26-097b78514257",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "8cdba186-9f5a-4339-88fb-a0ed05d6bc2a",
                        "documentation": "Get Recommendations",
                        "method": "get",
                        "endpoint": "recommendations",
                        "responses": [
                            {
                                "uuid": "1d60f19d-b378-4822-b584-ea0c46ac3601",
                                "body": "{\n  \"seeds\": [\n    {\n      \"afterFilteringSize\": {{faker 'random.number'}},\n      \"afterRelinkingSize\": {{faker 'random.number'}},\n      \"href\": \"\",\n      \"id\": \"\",\n      \"initialPoolSize\": {{faker 'random.number'}},\n      \"type\": \"\"\n    }\n  ],\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a recommendations response object in JSON format.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "97a1f9ba-4395-4e73-906d-2358339f8655",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "4e918312-7ddf-4133-b5ea-9d76f3531431",
                        "documentation": "Get Recommendation Genres",
                        "method": "get",
                        "endpoint": "recommendations/available-genre-seeds",
                        "responses": [
                            {
                                "uuid": "454fc9dc-3333-4f4d-b3f6-31fcb275a7f1",
                                "body": "{\n  \"genres\": [\n    \"\"\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a recommendations response object in JSON format.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "3955feae-fd05-458c-a1ef-f191b72d3c5f",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "84b416a5-d500-45ff-8bbc-638918dda641",
                        "documentation": "Search for an Item",
                        "method": "get",
                        "endpoint": "search",
                        "responses": [
                            {
                                "uuid": "a7b89793-71b4-4684-875b-f415b0e0856d",
                                "body": "{\n  \"albums\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"artists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"episodes\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'random.boolean'}},\n          \"resume_position_ms\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'random.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'random.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"shows\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "**On success**:\n\n- In the response ***header*** the HTTP status code is `200` OK.\n- For each type provided in the `type` parameter, the response ***body*** contains an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) / [simplified album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) / [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) / [simplified show objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject) / [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON.\n\n**On error**:\n\n- The ***header*** status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes).\n- The response ***body*** contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "fe8155dc-1ef9-4df5-98e9-85adf5bb0d2c",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "6a1912b7-ad15-4632-97ee-fecfaac3d3aa",
                        "documentation": "Get Multiple Shows",
                        "method": "get",
                        "endpoint": "shows",
                        "responses": [
                            {
                                "uuid": "9898cf9c-e022-4ad0-becc-4620ac6e13c5",
                                "body": "{\n  \"shows\": [\n    {\n      \"available_markets\": [\n        \"\"\n      ],\n      \"copyrights\": [\n        {\n          \"text\": \"\",\n          \"type\": \"\"\n        }\n      ],\n      \"description\": \"\",\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'random.boolean'}},\n      \"languages\": [\n        \"\"\n      ],\n      \"media_type\": \"\",\n      \"name\": \"\",\n      \"publisher\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `shows` and whose\nvalue is an array of [simple show object](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. If a show is unavailable in the given `market`, a `null` value is returned. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "d175bdd7-555c-4dfe-9597-5c58b1feafd7",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "81d239ba-52b5-4ddb-aca1-71b8111204f0",
                        "documentation": "Get a Show",
                        "method": "get",
                        "endpoint": "shows/:id",
                        "responses": [
                            {
                                "uuid": "664f25b4-0771-45e5-b7a8-43a58323c55b",
                                "body": "{\n  \"available_markets\": [\n    \"\"\n  ],\n  \"copyrights\": [\n    {\n      \"text\": \"\",\n      \"type\": \"\"\n    }\n  ],\n  \"description\": \"\",\n  \"episodes\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'random.boolean'}},\n          \"resume_position_ms\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"explicit\": {{faker 'random.boolean'}},\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"html_description\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"is_externally_hosted\": {{faker 'random.boolean'}},\n  \"languages\": [\n    \"\"\n  ],\n  \"media_type\": \"\",\n  \"name\": \"\",\n  \"publisher\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains a [show object](https://developer.spotify.com/documentation/web-api/reference/#object-showobject)\nin JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  \n\nIf a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "a5a4ac11-4b4e-492d-9666-3e41d7f823e2",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "1af18ecd-d96b-444d-98e9-a5bfb778d77a",
                        "documentation": "Get a Show's Episodes",
                        "method": "get",
                        "endpoint": "shows/:id/episodes",
                        "responses": [
                            {
                                "uuid": "d4e9f6fa-c210-448e-a9c9-298fbb1411cd",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"audio_preview_url\": \"\",\n      \"description\": \"\",\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"language\": \"\",\n      \"languages\": [\n        \"\"\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"resume_point\": {\n        \"fully_played\": {{faker 'random.boolean'}},\n        \"resume_position_ms\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).  \n\nIf a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND. Unavailable episodes are filtered out.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "dd9692fc-f899-4150-8acd-5ed5bdb32663",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "4a4f2c1d-bd66-404e-ad05-a844f3228e59",
                        "documentation": "Get Several Tracks",
                        "method": "get",
                        "endpoint": "tracks",
                        "responses": [
                            {
                                "uuid": "c646160d-8b2f-4ad8-a1f2-d49b2cfe0a43",
                                "body": "{\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `tracks` and whose\nvalue is an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "d01137c1-fff7-4d1f-a8f9-da208254ecd3",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "3cd7c9dd-3748-4011-87ba-974b8662a104",
                        "documentation": "Get a Track",
                        "method": "get",
                        "endpoint": "tracks/:id",
                        "responses": [
                            {
                                "uuid": "10577d3f-f892-4afc-b7ec-b8a5d904ca7a",
                                "body": "{\n  \"album\": {\n    \"album_group\": \"\",\n    \"album_type\": \"\",\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"name\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"name\": \"\",\n    \"release_date\": \"\",\n    \"release_date_precision\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"total_tracks\": {{faker 'random.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"available_markets\": [\n    \"\"\n  ],\n  \"disc_number\": {{faker 'random.number'}},\n  \"duration_ms\": {{faker 'random.number'}},\n  \"explicit\": {{faker 'random.boolean'}},\n  \"external_ids\": {\n    \"ean\": \"\",\n    \"isrc\": \"\",\n    \"upc\": \"\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"is_local\": {{faker 'random.boolean'}},\n  \"is_playable\": {{faker 'random.boolean'}},\n  \"linked_from\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"name\": \"\",\n  \"popularity\": {{faker 'random.number'}},\n  \"preview_url\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"track_number\": {{faker 'random.number'}},\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains a [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\nin JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "987e9713-6683-4024-8d97-e802a12c8ce4",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "2c27a7cc-0f17-411d-acac-b21e02ac681e",
                        "documentation": "Get a User's Profile",
                        "method": "get",
                        "endpoint": "users/:user_id",
                        "responses": [
                            {
                                "uuid": "28df1c01-a81c-4212-9847-ee198e649c05",
                                "body": "{\n  \"display_name\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). If a user with that user_id doesn't exist, the status code is `404` NOT FOUND.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "d59fa330-2eb0-4f6c-8f0e-ac1f57d8e21a",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "9aaf1729-59d6-475b-91a2-7ba9c2104e1d",
                        "documentation": "Get a List of a User's Playlists",
                        "method": "get",
                        "endpoint": "users/:user_id/playlists",
                        "responses": [
                            {
                                "uuid": "9f0af332-b546-4ba9-969c-8fb3642bb1d8",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"collaborative\": {{faker 'random.boolean'}},\n      \"description\": \"\",\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"owner\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"public\": {{faker 'random.boolean'}},\n      \"snapshot_id\": \"\",\n      \"tracks\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "07e2d8b3-ef69-4a77-8787-d72159b69f8d",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "ea5e6186-9bb0-4026-a5bb-6da7a6dc8946",
                        "documentation": "Create a Playlist",
                        "method": "post",
                        "endpoint": "users/:user_id/playlists",
                        "responses": [
                            {
                                "uuid": "b687fb64-2b53-4ee0-b9f6-6bf161dcdf40",
                                "body": "{\n  \"collaborative\": {{faker 'random.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'random.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'random.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'random.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'random.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'random.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'random.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'random.number'}},\n          \"duration_ms\": {{faker 'random.number'}},\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'random.boolean'}},\n          \"is_playable\": {{faker 'random.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\nin JSON format and the HTTP status code in the response header is `200` OK or\n`201` Created. There is also a `Location` response header giving the Web API\nendpoint for the new playlist.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "aa932a1c-39c2-483d-b9b9-ef5052c321a0",
                                "body": "{\n  \"collaborative\": {{faker 'random.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'random.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'random.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'random.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'random.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'random.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'random.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'random.number'}},\n          \"duration_ms\": {{faker 'random.number'}},\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'random.boolean'}},\n          \"is_playable\": {{faker 'random.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\nin JSON format and the HTTP status code in the response header is `200` OK or\n`201` Created. There is also a `Location` response header giving the Web API\nendpoint for the new playlist.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "4ddcf71c-4ee2-444d-9acf-77003972de1c",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "9470d522-8508-4f84-9f04-88332fc8aac4",
                        "documentation": "",
                        "method": "post",
                        "endpoint": "auth/api/token",
                        "responses": [
                            {
                                "uuid": "12247234-7618-4978-9dd9-6832dea93156",
                                "body": "{\n   \"access_token\": \"NgCXRK...MzYjw\",\n   \"token_type\": \"Bearer\",\n   \"scope\": \"user-read-private user-read-email\",\n   \"expires_in\": 3600,\n   \"refresh_token\": \"NgAagA...Um_SHo\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    }
                ],
                "proxyMode": false,
                "proxyHost": "",
                "proxyRemovePrefix": false,
                "cors": true,
                "headers": [],
                "proxyReqHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "proxyResHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "tlsOptions": {
                    "enabled": false,
                    "type": "CERT",
                    "pfxPath": "",
                    "certPath": "",
                    "keyPath": "",
                    "caPath": "",
                    "passphrase": ""
                }
            }
        }
    ]
}